// import 'dart:ui';

import 'package:flutter/material.dart';
import 'package:foodorich_customer_app/core/utils/size_utils.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onPrimaryContainer,
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.gray800,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(20.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(13.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.onPrimaryContainer;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.onPrimaryContainer;
          }
          return colorScheme.onSurface;
        }),
        side: const BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.blueGray8001e,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
    bodyLarge: TextStyle(
      color: appTheme.gray700,
      fontSize: 16.fSize,
      fontFamily: 'Inter',
      fontWeight: FontWeight.w400,
    ),
    bodyMedium: TextStyle(
      color: appTheme.gray900,
      fontSize: 14.fSize,
      fontFamily: 'Inter',
      fontWeight: FontWeight.w400,
    ),
    bodySmall: TextStyle(
      color: appTheme.gray800,
      fontSize: 9.fSize,
      fontFamily: 'Inter',
      fontWeight: FontWeight.w400,
    ),
    headlineLarge: TextStyle(
      color: appTheme.blueGray90001,
      fontSize: 32.fSize,
      fontFamily: 'Poppins',
      fontWeight: FontWeight.w500,
    ),
    headlineMedium: TextStyle(
      color: appTheme.blueGray90001,
      fontSize: 26.fSize,
      fontFamily: 'Inter',
      fontWeight: FontWeight.w500,
    ),
    headlineSmall: TextStyle(
      color: appTheme.gray900,
      fontSize: 24.fSize,
      fontFamily: 'Inter',
      fontWeight: FontWeight.w700,
    ),
    labelLarge: TextStyle(
      color: appTheme.gray900,
      fontSize: 12.fSize,
      fontFamily: 'Inter',
      fontWeight: FontWeight.w500,
    ),
    labelMedium: TextStyle(
      color: appTheme.gray900,
      fontSize: 10.fSize,
      fontFamily: 'Inter',
      fontWeight: FontWeight.w500,
    ),
    labelSmall: TextStyle(
      color: appTheme.gray900,
      fontSize: 9.fSize,
      fontFamily: 'Inter',
      fontWeight: FontWeight.w500,
    ),
    titleLarge: TextStyle(
      color: colorScheme.onPrimary,
      fontSize: 20.fSize,
      fontFamily: 'Inter',
      fontWeight: FontWeight.w700,
    ),
    titleMedium: TextStyle(
      color: appTheme.gray900,
      fontSize: 18.fSize,
      fontFamily: 'Inter',
      fontWeight: FontWeight.w500,
    ),
    titleSmall: TextStyle(
      color: colorScheme.primary,
      fontSize: 14.fSize,
      fontFamily: 'Inter',
      fontWeight: FontWeight.w600,
    ),
  );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static const primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFFFFBD19),
    primaryContainer: Color(0XFF393939),
    secondary: Color(0XFF393939),
    secondaryContainer: Color(0XFFFFBE1A),
    tertiary: Color(0XFF393939),
    tertiaryContainer: Color(0XFFFFBE1A),

    // Background colors
    background: Color(0XFF393939),

    // Surface colors
    surface: Color(0XFF393939),
    surfaceTint: Color(0XFF1A1F36),
    surfaceVariant: Color(0XFFFFBE1A),

    // Error colors
    error: Color(0XFF1A1F36),
    errorContainer: Color(0XFF697386),
    onError: Color(0XFFB2BBC9),
    onErrorContainer: Color(0XFF111111),

    // On colors(text colors)
    onBackground: Color(0XFFFFFFFF),
    onInverseSurface: Color(0XFFB2BBC9),
    onPrimary: Color(0XFF1A1F36),
    onPrimaryContainer: Color(0XFFFFFFFF),
    onSecondary: Color(0XFFFFFFFF),
    onSecondaryContainer: Color(0XFF1A1F36),
    onTertiary: Color(0XFFFFFFFF),
    onTertiaryContainer: Color(0XFF1A1F36),

    // Other colors
    outline: Color(0XFF1A1F36),
    outlineVariant: Color(0XFF393939),
    scrim: Color(0XFF393939),
    shadow: Color(0XFF1A1F36),

    // Inverse colors
    inversePrimary: Color(0XFF393939),
    inverseSurface: Color(0XFF1A1F36),

    // Pending colors
    onSurface: Color(0XFFFFFFFF),
    onSurfaceVariant: Color(0XFF1A1F36),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber300 => const Color(0XFFFDC55E);
  Color get amber500 => const Color(0XFFFFBC0D);
  Color get amber600 => const Color(0XFFFFB700);
  Color get amberA10011 => const Color(0X11FFE075);

  // Black
  Color get black900 => const Color(0XFF0C0D10);
  Color get black90001 => const Color(0XFF000000);

  // Blue
  Color get blue800 => const Color(0XFF1660CF);

  // BlueGray
  Color get blueGray400 => const Color(0XFF8792A2);
  Color get blueGray40001 => const Color(0XFF888888);
  Color get blueGray600 => const Color(0XFF666377);
  Color get blueGray900 => const Color(0XFF2E2E2E);
  Color get blueGray90001 => const Color(0XFF333333);

  // BlueGraye
  Color get blueGray8001e => const Color(0X1E3C4257);
  Color get blueGray9001e => const Color(0X1E252238);

  // DeepOrange
  Color get deepOrange800 => const Color(0XFFDC4312);

  // Gray
  Color get gray100 => const Color(0XFFF6F6F6);
  Color get gray50 => const Color(0XFFFAFAFA);
  Color get gray500 => const Color(0XFF9A9A9A);
  Color get gray50001 => const Color(0XFFA6A6A6);
  Color get gray5001 => const Color(0XFFFFFBF8);
  Color get gray5002 => const Color(0XFFFFFCF9);
  Color get gray600 => const Color(0XFF828282);
  Color get gray700 => const Color(0XFF666666);
  Color get gray800 => const Color(0XFF424242);
  Color get gray80001 => const Color(0XFF4F4F4F);
  Color get gray80002 => const Color(0XFF3E3E3E);
  Color get gray900 => const Color(0XFF191919);
  Color get gray90001 => const Color(0XFF1E1E1E);

  // Orange
  Color get orange60033 => const Color(0X33FF8A00);
  Color get orange6003301 => const Color(0X33FF8900);

  // Red
  Color get red400 => const Color(0XFFF54748);
  Color get redA10011 => const Color(0X11FF7E75);
  Color get redA400 => const Color(0XFFE4002B);

  // White
  Color get whiteA700 => const Color(0XFFFEFEFF);
  Color get whiteA70001 => const Color(0XFFFCFCFF);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
